"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const unknown_element_exception_1 = require("../errors/exceptions/unknown-element.exception");
class ContainerScanner {
    constructor(container) {
        this.container = container;
    }
    find(typeOrToken) {
        this.initFlatContainer();
        return this.findInstanceByPrototypeOrToken(typeOrToken, this.flatContainer);
    }
    findInstanceByPrototypeOrToken(metatypeOrToken, contextModule) {
        const dependencies = new Map([
            ...contextModule.components,
            ...contextModule.routes,
            ...contextModule.injectables,
        ]);
        const name = shared_utils_1.isFunction(metatypeOrToken)
            ? metatypeOrToken.name
            : metatypeOrToken;
        const instanceWrapper = dependencies.get(name);
        if (!instanceWrapper) {
            throw new unknown_element_exception_1.UnknownElementException();
        }
        return instanceWrapper.instance;
    }
    initFlatContainer() {
        if (this.flatContainer) {
            return undefined;
        }
        const modules = this.container.getModules();
        const initialValue = {
            components: [],
            routes: [],
            injectables: [],
        };
        const merge = (initial, arr) => [...initial, ...arr];
        this.flatContainer = [...modules.values()].reduce((current, next) => ({
            components: merge(current.components, next.components),
            routes: merge(current.routes, next.routes),
            injectables: merge(current.injectables, next.injectables),
        }), initialValue);
    }
}
exports.ContainerScanner = ContainerScanner;
